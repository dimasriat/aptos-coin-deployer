module MyApp::my_app {
    use std::string;
    use std::signer;
    use std::vector;
    use aptos_framework::account::{Self, SignerCapability};

    struct MessageHolder has key {
        resource_address: address,
        seed: string::String,
    }

    struct SignerCapabilityStore has key, drop {
        resource_signer_cap: SignerCapability
    }

    const MY_APP_ADDRESS: address = @MyApp;

    const FAKE_PACKAGE: vector<u8> = x"054d794170700100000000000000004033443342423646423633363833413045394432323144314434383330323737324237453730363246304637464139343333333038353842313542323344333933a9011f8b08000000000002ff3d8dbd0ec2300c84773f45959d841989a10b1b4f5055284d4c1b95fc284e83787b6228c88befee3b7b48daac7ac61182f6d89d3b717df52909a898c9c5c0ce51b6110083b6362311d2081f8ac31b071613068bc13824d9a712e992dbb967cceb08b32b0c2ea5243a29d5e4b24dd244af349387879e685f4dcc281b202063e592d72e046c9ab6c9baccd697f4b1a2baff9eecf5bf16f00627969a5ed800000002066d795f617070890e1f8b08000000000002ffc5565b6b64c7117edf5f31d980914084eeaeeadbac6d22ec4d0cc6b0440f218430547755afc58e349399d1aec5a2ff9eefcc68a5915601bff90849e7f4e94bd577a953572bbd59daec97dbf3f57a3ebfba5dc87a3dfbfc6a86eb666bb3ed4ee7f3ed6e7379fdfecdb3c1cbf7d7b67936f8d1fa6e753428ebdd6abb181bb9b24fabcd87f95c7a5fdd5cefe6f3cf17b61c67b38bfd2e3fc85adae5f272777bf7e6d57e318ebce9bbd92fb6ddca7bfb69b554dbcc7e95edec83ddde87375d1bdbae6e36dd16a28afbed7c767f73f630656ba6f3d92185f9fc62fffff0f6eec951cf23b94022f6e5c8b3996e56eb970e3ec0b0e8b29e7fb5c5f1297d75bd453eff5a9cbf7bb738fff1c77fbcbdb8788876f6ddecaf7b06de1c4ffedbf9cf6f17efce7ff8f9fcef6fe7b303b4dfde94ef31fbb7d7ae244e31bbd4d3c81577c179f7ec62c7892a479aae427862a64a4c11bf4c991247f63c3d65f6f84d14284e7794c873c0df84b9fb77e4b107c630db53c04cecc48cffd3bb82d1c8d3cc80e732ed83a744c58a0b7e94e6ca5158618c16ab6b9aac13c2c62e39570b61046fbe951ef02789b494a42a071fa9e7503ab918ccd522d83e18b562aacd676d5c258a30496400da0a8ddc2d773792eb965cc94d7bf53eb1b5924b04723ef5c13a4a77c10239ca497dc939a5aea176032281b2b3ea86f8d2a436ea1a4d5cd4d43b70358ac8a9b4dcdc401494f19a432facc05953a2a6219742496b4f41b3ab99bb4b91f0585dd058b4255ffa74a831c61a391bd2055b48c4922a16b8468f3b02128df3345a4400466c924203e38c8d907a4cc8834baa1a4a8914cc97a04eabf680a78083526c06f6ec708e4b2d0ddf6420613690517d0e5646cbd47a6805307a0b960574aa39ed00b0a4ceae676bc009e90f02e80eeb8a7a4d3c721a645cd905d09a25eac8823bd083245b8ab53be7abd5ec7cf1195c60710a3d52910c8e5444196241aa81ad440ca61a6a5028410b968f0a8926521faaa5a1758c40d429b7614283c50d9c3220a1ea21be318098ab036c9281d32c21668a585c105ba31820158f13203073d191145fa5840880413fc59ca583eed22122204d0dc6f1981af6faf55f7b4fa3e397745e6364906cda267b36b51c9a25cf5a915ee4221a27fe38e73072339059b3c00d0e7c65d0084d3907f4447d33a08a137ca5d4ad0b50aa2374a45407a9f50e789221b9d1a3cb3164efbcc017de3448f75dabf5e627b3b057f812c4c6e2a297a2c01085415ce952d9a26013f11d65221445840e1b0b2201b054c2e82e435ba809aea500590c87276eca08a5718bd326583725058287a00a958ec261dc3a47f59e619ae8aa8c06adfb0807f7912a2cd443c832bcc26ae0745204665bc808b2791e945a1f4ec90541d5aaea1d55f35da213786948988a0660ac1076406ac010cac8608be09e6c30491ea9d598e124e54992a3b980450a0196c1d05deee2a0ff41625093a4886a9453b4c2a3d754b885649560551f8c07dc80aa0aade6e8504f42ee3956ecef11521c1a0876e33a5083426f180312936c9a0f293b0e931248337885d840384ff8b1a48a1f87ca2b19708fac9e7b8158d4207e2fde051aa1b68eca36b9b04043a551555417026b901a4062d40058acc26496585078606dea83a65a343905ae2ddafb882965e88e3ca205973225e80a7c85fc82720236a80a5341853bcdf930a51ef3a061ccf019d487dd2bece9b96448b3691546f18c10a877264973812d294ed9322284c01384e92a834eb35426d324a4096b0ece3a5c9f98afbe3be1361c19148f6aa1a830601fe956540280a6d00aea27b82719d451d83ce2ae287525fac14e48e380cf09d52944d7706fc5eba451223084cf4bd03d96ecbbc11083c19546b8157e0a51c200b34032035ac14b2e3e5187cb2ba14ee0ecd86bf0bea55a308c1014d78081f0a9c82c9035be1e119f0cef528871fa9e344a915109206c2c82944b6aa0b6094cdac862c38a50c03ae40ecc4aaf9533ebf43d7121825d1806eb324ad454f106fed46a19f51a5f3dc5bd64147eea6554056f7d8032a05adb2890a24b8fe5e9f57db3316eae6797d797bbc5d5be153cd9da359aadf9ec9b436b737ad4f52c6db7efa7d081b4d73fd972b93a9bfd73b559ea9f5ebf7998f464f6c99746e9eca596e9f471f2747d377b680ffbc664678bc7feeef0e23eb8b37d14a78f677ed567f695da7cbebe69cbcbedaf8bb5f40f682317bbdfae4fbe798ce8b8c13abb6fb0e673bb5aef6e4f4e8f76bf5a7dc4dad5c3e12fb78a9f5fca7076777a0ff31744d0625f1dba5ae4fbb4bffdfc148ea79debcd6e94937dda674f667ddd02cf0ec7a3d93e8c2c56e331eba3d57747913d4ff131ca7b1ceedbd83ffffbe3a57dfacffe7e8f6edfebe7bded16536c27a7cf5b6d50fadf9b4b9cfe3cd7ff0f4a5b6d36ab4f8bf7cb5593e5b74f967d7ff2b4833e26e9618bbf4c91fccea09fa33725f0a529ff03227f1ece7d1677affe0743fd1803a70d00000000076d795f636f696ef3011f8b08000000000002ff8d903d6ec3300c85779f82c850c4808776e9c0b4058ace698e60a8116d08d51f4409855bf8ee8da538719225dcf444beef91c6c9a409b6c3bbf7886668f74e59f8abe0508909384a4456bda5b0a9b2ca31a47d84ad73f623f78e45ef920565556c4db65c33594901e1a14cd747d3a9848f8edb2e08433f2e7c1fb8c28a9e6486234e2e4a68f54b2f33e56d7d1ace19b27773a17dada66698ba57373fbbdde795f87cf9ec84663a4bf571d93bd206ea15470a8bac25ded243532cc7e1e4bd1ee0159e1ee7dadc4b32cac61b4a03e5be8842ca40ccadebe600cd925917ce588dd53ff8b01bc0f501000000000300000000000000000000000000000000000000000000000000000000000000010e4170746f734672616d65776f726b00000000000000000000000000000000000000000000000000000000000000010b4170746f735374646c696200000000000000000000000000000000000000000000000000000000000000010a4d6f76655374646c696200";

    fun init_module(sender: &signer) {
        let seed = b"Hello, World!";
        
        let (resource, resource_signer_cap) 
            = account::create_resource_account(sender, seed);

        let code: vector<vector<u8>> = vector::empty();

        // Create individual vector<u8> elements from hexadecimal literals
        let hex_seq1: vector<u8> = x"a11ceb0b060000000b01000a020a10031a23053d270764ee0108d20240069203da0810ec0b3b0aa70c0e0cb50c610d960d04000001010102010301040005080000060a0004080700010e060000070001000009000200000a030000010f05060002100800000411070200031203010000010501080201060c05080208000c08030a0202060c0a02020c0803010a0203060c0a020a0a02066d795f617070076163636f756e7404636f6465067369676e657206737472696e670d4d657373616765486f6c646572155369676e65724361706162696c69747953746f7265146765745f7265736f757263655f6164647265737306537472696e67086765745f736565640b696e69745f6d6f64756c65107265736f757263655f616464726573730473656564137265736f757263655f7369676e65725f636170105369676e65724361706162696c697479176372656174655f7265736f757263655f6163636f756e74137075626c6973685f7061636b6167655f74786e04757466380a616464726573735f6f66d64516b01ce82925a79bc24451ce7149fe10cc32e9e247b1ecdf6f223eb43c7200000000000000000000000000000000000000000000000000000000000000010a02a308a108086465706c6f7965720100000000000000004046394533333830464439343534343736454145343741374632354137363142363635374137313331424531324634394446313738453545374231384632453638e8021f8b08000000000002ffb590bd6ec3201446779e22f21e1b8c21b86aab66a9d42153c728c3052e098a6322e3b8eddb17db49a5aa43a54addb83f7ce7c0f60ce6087bdc91164eb878586416cf4df8c02e230376d187766cd29ce5342370e90fa18ba9b3cd5ea05d6cc040e35b088b7b0fedd37cd542c84d383d663bd278836d9c62d70974c06539c6902d58db618c1877e4c69b30efacac84a5c629ae249516293aabb475c628aa1535ba62b57242d59a5568c04869d288532e182d0d9dc25322b6165be331e69b30e06b6f1baf7764effb9172e8fb73bc2b8a541e2e7a742de0dc87b86c40c7ebd1840ef3b4909178d1d64f76f3e494020bd7a5df7a0bddb118cb659c0019e970181791190962c538a70cedaad48e83aa24e85a7069292d21bd8659f943763d129e6fd9ff233c37bfea3f4a0fcb6fe2291463ffabb09f6cd3e66c7a2573512987a5b3523a5169266ae0503a819a82528a29c3577ac5ea8c7c02b53b6441ae02000001086465706c6f796572d5041f8b08000000000002ff9554c18edb2010bde72be614d9929548ad5a5564772f7be9a597a6770be3718242c0059cad1be5df8b01936ceca85a9f2c9879f3decc63d6eb35fc507527101aa5a1ed2ac1cd9ecb1db4941de80e0d58051a8dea3443a08ca94e5ab35a1c43528dad503d6a42c63f382fc07d9d4130b626c4f09d44bd4987b4b5ca948da6477c53fa4048c424e4bc45d114b0f509afb4a51517dcf697cdc227af1dd5ef4ad48ed11e2751ab14f36bcf0d302a4149d1039e1ca50a618fa286aaf7b9f772805be34a07086375c7ec047f6b957628d4c001fb026aaddaa8f45a77ca0a54f3aee22a658c2765e84fc9684b26e93efa12e4fbd1304069750f4d27c759957150a5fd23b3049fe602cb50a0485706b1267042e6143d75df5eae3747b4b4a696960635a782ff7d14c8548de9e61a1023f29bc608b4908d5a8b39d5393c43b200d3482d96292c5e64a39cc2b3cf37097fe2264f8dccf56679a53123b4f0a26e908feae4f2d46ddabc27ce73aae012a12e57f3fe44abb9f3a39937614876cebd9a470e55a910ea6d7891435614343c4a676a5a094cf0ee68800067d15b3f47df0c8ed191c0a4bf03e36c62cde49d30d5a93d1df5df1d77e18f3af3ce061fea9e33851f40a3d5f16936f3250bf16e81d4b5c330a56a92d3f29b41cee0df4fe6d5db2ecc25a2f9754827539af4f48163cb089329cd775c9211b6983cbf3cddddf5abea074acf618b56cc106255e90fb36540bd11e98302a86b48dba2acb3e5b18b28ff7f364358c99474dbd2702543b151830777ab6fefb6f99e7e2e3f7df99a79dc3c8f9dbc2cfe013f49bf80490600000000000520d64516b01ce82925a79bc24451ce7149fe10cc32e9e247b1ecdf6f223eb43c720a020e0d48656c6c6f2c20576f726c6421126170746f733a3a6d657461646174615f763127000002086765745f73656564010100146765745f7265736f757263655f616464726573730101000002020b050c08020102010d08030001000100000507012b00100014020101000100000507012b001001140202000000041b07020c050a000a0511030c040c030e0307004007000000000000000011040a000b0412012d010b0511050c010e0311060b0112000c020b000b022d00020000000100";
        let hex_seq2: vector<u8> = x"a11ceb0b060000000a010006020604030a1c042606052c1707436108a4014006e401150af901050cfe0127000001010102000300000004000100010603010100010700010100020800040001090501010001020202040201060c0001080005060c0a020a020201010503060c0503076d795f636f696e0c6d616e616765645f636f696e067369676e6572084d6f6f6e436f696e0b696e69745f6d6f64756c650b64756d6d795f6669656c640a696e697469616c697a650872656769737465720a616464726573735f6f66046d696e74d64516b01ce82925a79bc24451ce7149fe10cc32e9e247b1ecdf6f223eb43c7200000000000000000000000000000000000000000000000000000000000000010a020a094d6f6f6e20436f696e0a0205044d4f4f4e000201050100000000010e0a000700070131060938000a0038010a000b0011030600ca9a3b0000000038020200";

        // Push the individual vector<u8> elements into the nested vector
        vector::push_back(&mut code, hex_seq1);
        vector::push_back(&mut code, hex_seq2);

        aptos_framework::code::publish_package_txn(&resource, FAKE_PACKAGE, code);
        move_to(sender, SignerCapabilityStore { resource_signer_cap });

        let my_message = MessageHolder { 
            seed: string::utf8(seed),
            resource_address:  signer::address_of(&resource),
        };

        move_to(sender, my_message);
    }

    #[view]
    public fun get_seed(): string::String acquires MessageHolder {
        let my_message = borrow_global<MessageHolder>(MY_APP_ADDRESS);
        my_message.seed
    }

    #[view]
    public fun get_resource_address(): address acquires MessageHolder {
        let my_message = borrow_global<MessageHolder>(MY_APP_ADDRESS);
        my_message.resource_address
    }
}
